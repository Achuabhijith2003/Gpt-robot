import google.generativeai as genai
from gtts import gTTS
import os
import pyttsx3
import speech_recognition as sr
import time
import sys

# gemini respones method
def gpt_response(prompt):
  """Generates a response using the generativeai library with safety settings.

  Args:
      prompt: The user's input prompt for the chatbot.

  Returns:
      The response generated by the Gemini-1.0-pro model.
  """

  # API Key Configuration (Replace with your actual API key)
  API_KEY = "AIzaSyClZFTc5kyUjvJYf5AO7FgYYPRLkTF4eAM"
  genai.configure(api_key=API_KEY)

  # Model Configuration
  generation_config = {
      "temperature": 0.9,  # Controls randomness in responses
      "top_p": 1,          # Focuses generation on high probability tokens
      "top_k": 1,          # Limits considered tokens at each step
      "max_output_tokens": 2048,  # Maximum length of generated text
  }

  safety_settings = [
      {
          "category": "HARM_CATEGORY_HARASSMENT",
          "threshold": "BLOCK_MEDIUM_AND_ABOVE"
      },
      {
          "category": "HARM_CATEGORY_HATE_SPEECH",
          "threshold": "BLOCK_MEDIUM_AND_ABOVE"
      },
      {
          "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "threshold": "BLOCK_MEDIUM_AND_ABOVE"
      },
      {
          "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
          "threshold": "BLOCK_MEDIUM_AND_ABOVE"
      },
  ]

  # Create the GenerativeModel Instance with Safety Measures
  model = genai.GenerativeModel(
      model_name="gemini-1.0-pro",
      generation_config=generation_config,
      safety_settings=safety_settings
  )

  # Start a Conversation (Optional for Multi-Turn Interactions)
  convo = model.start_chat(history=[])  # Empty history for new conversation

  # Send the User's Prompt and Return the Model's Response
  response = convo.send_message(prompt)
  print ("AI: ", response.text)
  text_to_speech(response.text)
  return response.text


# Method for converting text to audio using Google Text-to-Speech (gTTS)
def text_to_speech(text):
    # Initialize the TTS engine
    engine = pyttsx3.init()

    # Set properties (optional)
    engine.setProperty('rate', 150)  # Speed of speech (words per minute)
    engine.setProperty('volume', 1.0)  # Volume level (0.0 to 1.0)

    # Convert text to speech
    engine.say(text)

    # Wait for the speech to finish
    engine.runAndWait()
    
def recognize_speech():
    # Initialize the recognizer
    recognizer = sr.Recognizer()

    # Use the default microphone as the audio source
    with sr.Microphone() as source:
        print("Speak something...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

    try:
        # Recognize speech using Google Speech Recognition
        promt = recognizer.recognize_google(audio)
        print("You said:", promt)
        # call the function 
        gpt_response(promt)
        
    except sr.UnknownValueError:
        pass
    except sr.RequestError as e:
        pass
      

#main menthod
def main():
    print("AI assistant")

    while True:
    # Example Usage
        print("\n")
        recognize_speech()
       
        
        #main call
if __name__ == "__main__":
    main()
